{"hash":"5a2d29c538c5bb4ef6e32bf52e76651db58daf61","data":{"blogPost":{"id":"62ad110dfb40b6d22f2b0f34d019db66","title":"Local Development Environment with Docker for PHP (Part 2)","date":"May 27, 2017","content":"<p><strong><em>Setting MySQL, Adminer and Redis</em></strong></p>\n<p>In our last <a href=\"/local-development-environment-with-docker-for-php\">post</a> we installed docker in our machine and setup our environment with several containers. We added nginx container as a server, a php-fpm container and and installed a laravel application. Now we’ll install a mysql database to persist our application data.</p>\n<section><h3 id=\"install-mysql\"><a href=\"#install-mysql\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Install MySQL</h3><p>Before we create a mysql container we’ll create a volume to persist the database data and map it to a directory in the docker host. These volume will persist our data even if we remove the mysql container so we’ll not lose our data. Go to the volumes page in portainer dashboard and create a volume with any name you want</p><p><img src=\"https://cdn-images-1.medium.com/max/2100/1*ur0pakZo72aujOWtKATx_Q.png\" alt=\"Create a volume to persist db data\"><em>Create a volume to persist db data</em></p><p>Now let’s create a mysql container</p><p><img src=\"https://cdn-images-1.medium.com/max/2448/1*C4YmteRZNkzXn8dQOzfMag.png\" alt=\"Create a mysql container\"><em>Create a mysql container</em></p><p>Give the container a name and let’s use the official mysql image. We don’t need to expose any ports publicly because our application will talk to the db and it can because it’ll be in the same network. Attach the newly created volume to /var/lib/mysql directory in docker host</p><p><img src=\"https://cdn-images-1.medium.com/max/2412/1*q0zi20rBRh1kPHzcrKub7A.png\" alt=\"Attach db-data volume to docker host\"><em>Attach db-data volume to docker host</em></p><p>Also select the php network in the network tab. In the Env tab add the below environment varibles</p><p><img src=\"https://cdn-images-1.medium.com/max/2414/1*UhaTQ2dS-eD30KOcArGQuw.png\" alt=\"Add environment variable for our container\"><em>Add environment variable for our container</em></p><p>MYSQL_ROOT_PASSWORD create a password for root mysql user, MYSQL_DATABASE creates database with the name and it’s optional so you can omit this if you want. MYSQL_USER and MYSQL_PASSWORD create a new mysql user and its password and these are optional too. Now create the container by hitting start container button.</p><p>Let’s check our application can connect to the database. First configure our database connection in env file of our project.</p><pre class=\"language-text\"><code class=\"language-text\">DB_CONNECTION=mysql\nDB_HOST=db\nDB_PORT=3306\nDB_DATABASE=example\nDB_USERNAME=hasnayeen\nDB_PASSWORD=secret</code></pre><p>Now connect to php container bash console from portainer dashboard and you’ll be in the /var/www directory. cd into the example directory and run migration command</p><p><img src=\"https://cdn-images-1.medium.com/max/2422/1*TjvfcGB9HWK7e7DCfBvEHQ.png\" alt=\"Test our application can talk to db container\"><em>Test our application can talk to db container</em></p><p>Our application has successfully connected to the db container and migrated the default database tables.</p></section>\n<section><h3 id=\"install-adminer\"><a href=\"#install-adminer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Install Adminer</h3><p>We can use the mysql cli in the dbcontainer to interact with database but we like to do it through a graphical interface. Many people use phpmyadmin as a database manager but I personally use adminer so I’m going to create a container using the official adminer image</p><p><img src=\"https://cdn-images-1.medium.com/max/2490/1*3nEZVkit9x1LtO5je-UVeA.png\" alt=\"Create a adminer container\"><em>Create a adminer container</em></p><p>I named the container adminer and published all exposed port. Docker is going to assign a random port to 8080 of the container but if you want to assign a specific port on your host then you can map it through the Port mapping option. Let’s create the container</p><p><img src=\"https://cdn-images-1.medium.com/max/2478/1*hILFuScsQKF_H-uZAcidwQ.png\" alt=\"Our adminer container is running and mapped to a random port\"><em>Our adminer container is running and mapped to a random port</em></p><p>You can see docker has assigned 32768 port to container 8080 port. Click the link and we see the login page of adminer</p><p><img src=\"https://cdn-images-1.medium.com/max/2648/1*51oqrt5YrChLVCSXcnfURw.png\" alt=\"Login page of adminer\"><em>Login page of adminer</em></p><p>Fill all the field with proper value and hit login. Remember the server name is the name of the container of our mysql container which is in our case db.</p><p><img src=\"https://cdn-images-1.medium.com/max/2646/1*f0RoTwAdGIPBcq86WFxG5A.png\"></p></section>\n<section><h3 id=\"install-redis\"><a href=\"#install-redis\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Install Redis</h3><p>Let’s now create a redis container to use as a cache memory.</p><p><img src=\"https://cdn-images-1.medium.com/max/2070/1*t1rRZ0mydVzd9isqqVxMfQ.png\" alt=\"Create a redis container\"><em>Create a redis container</em></p><p>Attach the container to the php network and to persist our data we can use the db-data volume and mapped it to /var/lib/redis directory of docker host. Finally add a command in the command tab to run redis with appendonly mode and create the container</p><p><img src=\"https://cdn-images-1.medium.com/max/2414/1*pp9X1Yeb9d75FyHK3J2_9Q.png\" alt=\"Add a command to run redis with appendonly mode\"><em>Add a command to run redis with appendonly mode</em></p><p>Now we need to configure our .env file in our application</p><pre class=\"language-text\"><code class=\"language-text\">CACHE_DRIVER=redis\n\nREDIS_HOST=redis\nREDIS_PASSWORD=null\nREDIS_PORT=6379</code></pre><p>Cache driver will be redis and redis host name is the name of our container which is redis. We’ll also need to predis/predis package to use redis in our application. So connect to the php container bash terminal and install the package</p><pre class=\"language-text\"><code class=\"language-text\">$ composer require predis/predis</code></pre><p>After predis has been installed let’s check it’s working. We’ll add to route to our routes file, one for putting a value in the cache and one to get the value, so add the below code in the routes/web.php file</p><pre class=\"language-text\"><code class=\"language-text\">Route::get(&#39;get&#39;, function() {\n    return \\Illuminate\\Support\\Facades\\Cache::get(&#39;hello&#39;);\n});\n\nRoute::get(&#39;put&#39;, function() {\n    return \\Illuminate\\Support\\Facades\\Cache::put(&#39;hello&#39;, &#39;world&#39;, 5);\n});</code></pre><p>Now first visit the put routes to put world as a value of hello key. It’ll return nothing but if we now visit the get route we’ll see it retrieve the value of hello key from the cache and return it to us.</p><p><img src=\"https://cdn-images-1.medium.com/max/2640/1*OMac2ow4KGEYNoE2ug04og.png\" alt=\"Checking our redis container is working\"><em>Checking our redis container is working</em></p></section>\n<section><h3 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h3><p>So we have added few more containers and our machine is ready to build awesome applications with laravel.</p><p>In next post we’ll see how we can use different PHP versions and databases to test our application without messing with our host machine.</p><p>If you liked the content please consider to share the knowledge and don’t forget to subscribe for more.</p><p><a href=\"/local-development-environment-with-docker-for-php\">Part-1</a></p><p><a href=\"/local-development-environment-with-docker-for-php-3\">Part-3</a></p></section>\n","timeToRead":4}},"context":{}}